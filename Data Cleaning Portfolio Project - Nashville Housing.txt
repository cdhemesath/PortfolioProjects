/*
Cleaning Nashville Housing Data in SQL Queries
*/ 

SELECT * FROM `first-portfolio-project-417200.Nashville_Housing.Nashville_Housing_Data` LIMIT 1000
;


-- Populate Property Address Data


SELECT *
FROM `Nashville_Housing.Nashville_Housing_Data`
ORDER BY ParcelID
;

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM `Nashville_Housing.Nashville_Housing_Data` a
JOIN `Nashville_Housing.Nashville_Housing_Data` b
  ON a.ParcelID = b.ParcelID
  AND a.UniqueID_ <> b.UniqueID_
WHERE a.PropertyAddress IS NULL
  ;

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM `Nashville_Housing.Nashville_Housing_Data` a
JOIN `Nashville_Housing.Nashville_Housing_Data` b
    ON a.ParcelID = b.ParcelID
  AND a.UniqueID_ <> b.UniqueID_
WHERE a.PropertyAddress IS NULL
;

-- Splitting Property Address into seperate columns (address, city) with Substrings

SELECT PropertyAddress
FROM `Nashville_Housing.Nashville_Housing_Data`
;

SELECT
SUBSTRING( PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) AS Address,
SUBSTRING( PropertyAddress, CHARINDEX(',', PropertyAddress) + 1,LEN(PropertyAddress)) AS Address

  FROM `Nashville_Housing.Nashville_Housing_Data`

;

ALTER TABLE Nashville_Housing_Data
ADD PropertySplitAddress NVARCHAR (255);

UPDATE Nashville_Housing_Data
  SET PropertySplitAddress = SUBSTRING( PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

ALTER TABLE Nashville_Housing_Data
ADD PropertySplitCity NVARCHAR (255);

UPDATE Nashville_Housing_Data
  SET PropertySplitCity = SUBSTRING( PropertyAddress, CHARINDEX(',', PropertyAddress) + 1,LEN(PropertyAddress))

;

SELECT * FROM `Nashville_Housing.Nashville_Housing_Data` ;


-- Splitting out Owner Address into seperate columns (address, city, state) with Parsename


SELECT OwnerAddress
FROM `Nashville_Housing.Nashville_Housing_Data` ;


SELECT PARSENAME(REPLACE(OwnerAddress, ',', '.'),3),
PARSENAME(REPLACE(OwnerAddress, ',', '.'),2),
PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)
FROM `Nashville_Housing.Nashville_Housing_Data`
;


ALTER TABLE Nashville_Housing_Data
ADD OwnerSplitAddress NVARCHAR (255);

UPDATE Nashville_Housing_Data
  SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'),3)

ALTER TABLE Nashville_Housing_Data
ADD OwnerSplitCity NVARCHAR (255);

UPDATE Nashville_Housing_Data
  SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'),2)

ALTER TABLE Nashville_Housing_Data
ADD OwnerSplitState NVARCHAR (255);

UPDATE Nashville_Housing_Data
  SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)
;

SELECT * FROM `Nashville_Housing.Nashville_Housing_Data`
;

-- Changing Y and N to Yes and No in "Sold as Vacant" field


SELECT Distinct(SoldAsVacant), COUNT(SoldAsVacant)
FROM `Nashville_Housing.Nashville_Housing_Data`
GROUP BY SoldAsVacant
ORDER BY 2
;

SELECT SoldAsVacant,
  CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
    WHEN SoldAsVacant = 'N' THEN 'No'
       ELSE SoldAsVacant
    END
FROM `Nashville_Housing.Nashville_Housing_Data`
;

UPDATE Nashville_Housing_Data
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
    WHEN SoldAsVacant = 'N' THEN 'No'
       ELSE SoldAsVacant
    END
;

-- Removing duplicate entries

WITH RowNumCTE AS(
SELECT *,
    ROW_NUMBER() OVER (
      PARTITION BY ParcelID,
                      PropertyAddress,
                      SalePrice,
                      SaleDate,
                      LegalReference
                      ORDER BY UniqueID_) row_num

FROM `Nashville_Housing.Nashville_Housing_Data` 
)

SELECT *
FROM RowNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress
;

SELECT *
FROM `Nashville_Housing.Nashville_Housing_Data`;


-- Deleting Unused Columns


SELECT *
FROM `Nashville_Housing.Nashville_Housing_Data`
;

ALTER TABLE `Nashville_Housing.Nashville_Housing_Data`
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress
